{"version":3,"file":"static/js/858.97ca1963.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/generateId.ts","../node_modules/react-hook-form/src/logic/getFocusFieldName.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/append.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/insert.ts","../node_modules/react-hook-form/src/utils/move.ts","../node_modules/react-hook-form/src/utils/prepend.ts","../node_modules/react-hook-form/src/utils/remove.ts","../node_modules/react-hook-form/src/utils/swap.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/update.ts","../node_modules/react-hook-form/src/useFieldArray.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...data,\n  ...convertToArrayPayload(value),\n];\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...convertToArrayPayload(value),\n  ...convertToArrayPayload(data),\n];\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport getValidationModes from './logic/getValidationModes';\nimport isWatched from './logic/isWatched';\nimport iterateFieldsByAction from './logic/iterateFieldsByAction';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends\n    FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n    rules,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  rules &&\n    (control as Control<TFieldValues>).register(\n      name as FieldPath<TFieldValues>,\n      rules as RegisterOptions<TFieldValues>,\n    );\n\n  useSubscribe({\n    next: ({\n      values,\n      name: fieldArrayName,\n    }: {\n      values?: FieldValues;\n      name?: InternalFieldName;\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        const fieldValues = get(values, _name.current);\n        if (Array.isArray(fieldValues)) {\n          setFields(fieldValues);\n          ids.current = fieldValues.map(generateId);\n        }\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    !Array.isArray(get(control._fields, name)) &&\n      set(control._fields, name, undefined);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._state.action = false;\n\n    isWatched(name, control._names) &&\n      control._subjects.state.next({\n        ...control._formState,\n      } as FormState<TFieldValues>);\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted)\n    ) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError\n              ? (!error && existingError.type) ||\n                (error &&\n                  (existingError.type !== error.type ||\n                    existingError.message !== error.message))\n              : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (\n          field &&\n          field._f &&\n          !(\n            getValidationModes(control._options.reValidateMode).isOnSubmit &&\n            getValidationModes(control._options.mode).isOnSubmit\n          )\n        ) {\n          validateField(\n            field,\n            control._names.disabled,\n            control._formValues,\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors as FieldErrors<TFieldValues>,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.values.next({\n      name,\n      values: { ...control._formValues },\n    });\n\n    control._names.focus &&\n      iterateFieldsByAction(control._fields, (ref, key: string) => {\n        if (\n          control._names.focus &&\n          key.startsWith(control._names.focus) &&\n          ref.focus\n        ) {\n          ref.focus();\n          return 1;\n        }\n        return;\n      });\n\n    control._names.focus = '';\n\n    control._updateValid();\n\n    _actioned.current = false;\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating || _proxyFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      const disabledField = !!(\n        get(_fields, name) &&\n        get(_fields, name)._f &&\n        get(_fields, name)._f.disabled\n      );\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine =\n          disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n        isPreviousDirty = !!(\n          !disabledField && get(_formState.dirtyFields, name)\n        );\n        isCurrentFieldPristine || disabledField\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.dirtyFields &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            (_proxyFormState.touchedFields &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid) {\n          if (_options.mode === 'onBlur' && isBlurEvent) {\n            _updateValid();\n          } else if (!isBlurEvent) {\n            _updateValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n\n      updateTouchAndDirty(\n        name,\n        getFieldValue(field ? field._f : get(fields, name)._f),\n        false,\n        false,\n        true,\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n\n      let fieldValues = cloneObject(_formValues);\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          set(fieldValues, name, undefined);\n        }\n      }\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = _options.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","types","generateId","d","performance","now","c","r","Math","random","toString","getFocusFieldName","options","shouldFocus","focusName","focusIndex","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","appendAt","fillEmptyArray","insert","moveArrayAt","from","to","splice","prependAt","removeArrayAt","indexes","i","temp","removeAtIndexes","sort","a","b","swapArrayAt","indexA","indexB","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","updateAt","fieldValues","useFieldArray","methods","keyName","shouldUnregister","rules","setFields","_getFieldArray","ids","_fieldIds","_name","_actioned","array","register","_ref","fieldArrayName","_subjects","updateValues","updatedFieldArrayValues","_updateFieldArray","_state","state","_formState","_options","isSubmitted","resolver","_executeSchema","then","existingError","_fields","reValidateMode","_formValues","criteriaMode","focus","_updateValid","unregister","swap","argA","argB","move","prepend","prependValue","append","appendValue","remove","insertValue","update","updateValue","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","_ref2","setValueAs","NaN","getFieldValue","files","selectedOptions","_ref3","getResolverOptions","getRuleValue","rule","source","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","executeBuiltInValidation","_updateIsValidating","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","_getWatch","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","_ref4","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","method","args","shouldSetValues","shouldUpdateFieldsAndState","_resetDefaultValues","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","_values"],"sourceRoot":""}