{"version":3,"file":"static/js/613.b4ee0374.chunk.js","mappings":"qMAWA,QAVsB,WACpB,IAAIA,GAAeC,EAAAA,EAAAA,SAAO,GAO1B,OANAC,EAAAA,EAAAA,YAAU,WAER,OADAF,EAAaG,SAAU,EAChB,WACLH,EAAaG,SAAU,CACzB,CACF,GAAG,IACIH,CACT,ECKA,QAZA,SAAsBI,GACpB,IAAIJ,EAAeK,IACfC,GAAKC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,UAASJ,GAAe,GACtCK,EAAQH,EAAG,GACXI,EAAWJ,EAAG,GAMhB,MAAO,CAACG,GALcE,EAAAA,EAAAA,cAAY,SAAUC,GAEtCZ,EAAaG,SACjBO,EAASE,EACX,GAAG,IAEL,E,2CCHA,MAAMC,EAAO,CAAC,KAAM,MAAO,MAAO,MAAO,OAE5BC,EAAa,CACxBC,QAAS,CACPC,KAAM,MACNC,MAAO,yBAETC,WAAY,CACVF,KAAM,MACNC,MAAO,yBAETE,UAAW,CACTH,KAAM,MACNC,MAAO,wBAETG,MAAO,CACLJ,KAAM,MACNC,MAAO,sBAETI,OAAS,CACPL,KAAO,MACPC,MAAQ,uBAICK,EAAOA,KAClB,IAAKC,EAAQC,IAAahB,EAAAA,EAAAA,WAAkB,GAC5C,MAAOiB,EAAeC,IAAoBlB,EAAAA,EAAAA,UAAS,IAC5CmB,EAAcC,GAAmBC,EAAkB,CAAC,GAO3D,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,MAAM,UAEZL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACtEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iDAAgDC,UAC7DC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,UAASC,SAAC,YAUzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAoBK,IAAI,oBAGzCH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCF,EAAAA,EAAAA,MAACO,EAAAA,GAAIC,MAAK,CAACb,cAAeA,EAAec,SAxBlBC,IAC3Bd,EAAiBc,EAAE,EAuBwDR,SAAA,EACrEC,EAAAA,EAAAA,KAACI,EAAAA,GAAIf,KAAI,CAACS,UAAU,iDAAgDC,SACjEnB,EAAK4B,KAAI,CAACD,EAAGE,KACZT,EAAAA,EAAAA,KAACI,EAAAA,GAAG,CAACM,GAAIC,EAAAA,SAASZ,SACfa,IAAA,IAAC,SAAEC,GAAUD,EAAA,OACZf,EAAAA,EAAAA,MAAA,UAAQC,UAAU,qEAAoEC,SAAA,CACnFQ,GACDP,EAAAA,EAAAA,KAAA,QACEF,UAAW,oBACTe,EAAW,eAAiB,sBAGzB,GATWJ,QAc5BT,EAAAA,EAAAA,KAACI,EAAAA,GAAIU,OAAM,CAAAf,SA3CJ,CAAC,GAAI,UAAW,aAAc,YAAa,aA4CxCS,KAAKD,IACXP,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CAACC,OAAQT,eAKnB,EAIV,G","sources":["../node_modules/ahooks/es/useUnmountedRef/index.js","../node_modules/ahooks/es/useSafeState/index.js","pages/Point/pages/List.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\nvar useUnmountedRef = function () {\n  var unmountedRef = useRef(false);\n  useEffect(function () {\n    unmountedRef.current = false;\n    return function () {\n      unmountedRef.current = true;\n    };\n  }, []);\n  return unmountedRef;\n};\nexport default useUnmountedRef;","import { __read } from \"tslib\";\nimport { useCallback, useState } from 'react';\nimport useUnmountedRef from '../useUnmountedRef';\nfunction useSafeState(initialState) {\n  var unmountedRef = useUnmountedRef();\n  var _a = __read(useState(initialState), 2),\n    state = _a[0],\n    setState = _a[1];\n  var setCurrentState = useCallback(function (currentState) {\n    /** if component is unmounted, stop update */\n    if (unmountedRef.current) return;\n    setState(currentState);\n  }, []);\n  return [state, setCurrentState];\n}\nexport default useSafeState;","import { FC, useState, Fragment, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRequest, useSafeState, useLockFn } from \"ahooks\";\nimport { Tab } from \"@headlessui/react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { Head, Loader, Panel } from \"../components\";\nimport { getOrderList } from \"../api\";\nimport dayjs from \"dayjs\";\nimport numeral from \"numeral\";\nimport \"./style.css\";\n\nconst TABS = [\"全部\", \"待处理\", \"处理中\", \"已完成\", \"已取消\"];\n\nexport const STATUS_MAP = {\n  pending: {\n    text: \"待处理\",\n    clazz: \"text-yellow-secondary\",\n  },\n  processing: {\n    text: \"处理中\",\n    clazz: \"text-yellow-secondary\",\n  },\n  completed: {\n    text: \"已完成\",\n    clazz: \"text-green-secondary\",\n  },\n  other: {\n    text: \"已取消\",\n    clazz: \"text-red-secondary\",\n  },\n  failed : {\n    text : \"已驳回\",\n    clazz : \"text-red-secondary\"\n  }\n};\n\nexport const List = () => {\n  let [isOpen, setIsOpen] = useState<boolean>(!true);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [activeNumber, setActiveNumber] = useSafeState<any>({});\n  const tabmap = [\"\", \"pending\", \"processing\", \"completed\", \"cancelled\"];\n\n  const handleSelectedIndex = (i: any) => {\n    setSelectedIndex(i);\n  };\n\n  return (\n    <div className=\"container min-h-screen bg-white/90\">\n      <Head title=\"订单列表\" />\n\n      <div className=\"jf-red w-full p-3 flex gap-3 text-white justify-between\">\n        <div className=\"flex flex-col font-medium gap-3 justify-center\">\n          <p className=\"text-xl\">订单信息</p>\n          {/* <div className=\"text-sm flex gap-3\">\n              <p>\n              消费订单: {localStorage?.getItem?.('num-key') ?? 0}\n              </p>\n              <p>\n              总消费 : 6500积分\n              </p>\n              </div> */}\n        </div>\n        <img className=\"w-[60px] h-[60px]\" src=\"redicon.png\" />\n      </div>\n\n      <div className=\"flex flex-col gap-y-2\">\n        <Tab.Group selectedIndex={selectedIndex} onChange={handleSelectedIndex}>\n          <Tab.List className=\"h-12 flex items-center justify-around bg-white\">\n            {TABS.map((i, k) => (\n              <Tab as={Fragment} key={k}>\n                {({ selected }) => (\n                  <button className=\"flex flex-col items-center gap-0.5 outline-none focus:outline-none\">\n                    {i}\n                    <span\n                      className={`w-4 h-1 rounded ${\n                        selected ? \"bg-[#ff6a33]\" : \"bg-transparent\"\n                      }`}\n                    ></span>\n                  </button>\n                )}\n              </Tab>\n            ))}\n          </Tab.List>\n          <Tab.Panels>\n            {tabmap.map((i: string) => (\n              <Panel status={i} />\n            ))}\n          </Tab.Panels>\n        </Tab.Group>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n"],"names":["unmountedRef","useRef","useEffect","current","initialState","useUnmountedRef","_a","__read","useState","state","setState","useCallback","currentState","TABS","STATUS_MAP","pending","text","clazz","processing","completed","other","failed","List","isOpen","setIsOpen","selectedIndex","setSelectedIndex","activeNumber","setActiveNumber","useSafeState","_jsxs","className","children","_jsx","Head","title","src","Tab","Group","onChange","i","map","k","as","Fragment","_ref","selected","Panels","Panel","status"],"sourceRoot":""}