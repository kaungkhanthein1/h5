{"version":3,"file":"static/js/688.f3c012f2.chunk.js","mappings":"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","sources":["components/login/Social/Login.tsx","components/login/Social/Register.tsx","components/login/Social/Captch.tsx","components/login/Social/Bound.tsx","pages/callback/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport close from \"../../../assets/login/close.svg\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setCaptchaOpen } from \"../../../features/login/ModelSlice\";\nimport { handleSocialLoginCredentials } from \"../../../services/userService\";\n\ninterface LoginProps {\n  show: boolean;\n  setShow: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst Login: React.FC<LoginProps> = ({ setShow }) => {\n  const { captchaCode, captchaKey, social_id } = useSelector(\n    (state: any) => state.model\n  );\n  const [searchParams] = useSearchParams();\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isFocusedName, setIsFocusedName] = useState(false);\n  const [isFocusedEmail, setIsFocusedEmail] = useState(false);\n  const [isFocusedPassword, setIsFocusedPassword] = useState(false);\n\n  // Password validation: at least 6 characters, should contain at least one number and one letter\n  const validatePassword = (password: string) => {\n    const lengthValid = password.length >= 6;\n    const containsLetters = /[a-zA-Z]/.test(password);\n    const containsNumbers = /\\d/.test(password);\n    return lengthValid && containsLetters && containsNumbers;\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const type = searchParams.get(\"type\") ?? \"\";\n\n    if (captchaCode && captchaKey) {\n      const data = await handleSocialLoginCredentials(\n        captchaCode,\n        captchaKey,\n        name,\n        password,\n        type,\n        social_id\n      );\n    } else {\n      dispatch(setCaptchaOpen(true));\n    }\n  };\n\n  return (\n    <div className=\"\">\n      <div className=\"\">\n        <img\n          onClick={() => navigate(\"/profile\")}\n          className=\"close p-3\"\n          src={close}\n          alt=\"Close\"\n        />\n      </div>\n      <div className=\"\">\n        {/* Header */}\n        <div className=\"py-[30px] px-[10px] flex justify-between items-center\">\n          <p\n            onClick={() => setShow(false)}\n            className=\"create px-[1px] text-[12px] font-[500] text-[#FF4C00]\"\n          >\n            Create new account\n          </p>\n          <p className=\"text-white text-[18px] font-[600]\">Link Account</p>\n        </div>\n        <div className=\"pt-[40px]\">\n          <form onSubmit={handleSubmit}>\n            {/* Name Input */}\n            <div className=\"relative py-[20px]\">\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                onFocus={() => setIsFocusedName(true)}\n                onBlur={() => setIsFocusedName(name !== \"\")}\n                className=\"w-full px-4 py-2 bg-[#161619] input_border focus:outline-none text-white placeholder-transparent\"\n                required\n                placeholder=\"\"\n              />\n              <label\n                htmlFor=\"name\"\n                className={`absolute text-[14px] left-4 text-gray-500 transition-all duration-300 pointer-events-none ${\n                  isFocusedName || name\n                    ? \"top-[-8px] text-[12px] text-blue-500\"\n                    : \"top-1/2 transform -translate-y-1/2\"\n                }`}\n              >\n                Set Your Name\n              </label>\n            </div>\n\n            {/* Password Input with validation */}\n            <div className=\"relative py-[20px]\">\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                onFocus={() => setIsFocusedPassword(true)}\n                onBlur={() => setIsFocusedPassword(password !== \"\")}\n                className=\"w-full px-4 py-2 bg-[#161619] input_border focus:outline-none text-white placeholder-transparent\"\n                required\n                placeholder=\"\"\n              />\n              <label\n                htmlFor=\"password\"\n                className={`absolute text-[14px] left-4 text-gray-500 transition-all duration-300 pointer-events-none ${\n                  isFocusedPassword || password\n                    ? \"top-[-8px] text-[12px] text-blue-500\"\n                    : \"top-1/2 transform -translate-y-1/2\"\n                }`}\n              >\n                Enter Your Password\n              </label>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              disabled={!validatePassword(password)}\n              type=\"submit\"\n              className={`w-full mt-[20px] py-2 px-4 rounded-lg ${\n                validatePassword(password) ? \"login_button\" : \"next_button\"\n              } transition duration-300 ease-in-out`}\n            >\n              Next\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport close from \"../../../assets/login/close.svg\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  handleSocialLoginCredentials,\n  handleSocialSignUpCredentials,\n} from \"../../../services/userService\";\nimport { setCaptchaOpen } from \"../../../features/login/ModelSlice\";\n\ninterface RegisterProp {}\n\nconst Register: React.FC<RegisterProp> = ({}) => {\n  const { captchaCode, captchaKey, social_id } = useSelector(\n    (state: any) => state.model\n  );\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n  const [name, setName] = useState(\"\");\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isFocusedName, setIsFocusedName] = useState(false);\n  const [isFocusedEmail, setIsFocusedEmail] = useState(false);\n  const [isFocusedPassword, setIsFocusedPassword] = useState(false);\n  const [isFocusedConfirmPassword, setIsFocusedConfirmPassword] =\n    useState(false);\n\n  // Password validation: at least 6 characters, should contain at least one number and one letter\n  const validatePassword = (password: string) => {\n    const lengthValid = password.length >= 6;\n    const containsLetters = /[a-zA-Z]/.test(password);\n    const containsNumbers = /\\d/.test(password);\n    return lengthValid && containsLetters && containsNumbers;\n  };\n\n  // Check if password and confirmPassword match\n  const passwordsMatch = password === confirmPassword;\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const type = searchParams.get(\"type\") ?? \"\";\n\n    if (captchaCode && captchaKey) {\n      const data = handleSocialSignUpCredentials(\n        captchaCode,\n        captchaKey,\n        name,\n        password,\n        confirmPassword,\n        type,\n        social_id\n      );\n    } else {\n      dispatch(setCaptchaOpen(true));\n    }\n  };\n  return (\n    <div className=\"\">\n      <div className=\"\">\n        <img\n          onClick={() => navigate(\"/profile\")}\n          className=\"close p-3\"\n          src={close}\n          alt=\"Close\"\n        />\n      </div>\n      <div className=\"\">\n        {/* Header */}\n        <div className=\"py-[30px] px-[10px] flex flex-col \">\n          <p className=\"text-white text-[18px] font-[600]\">\n            Create new account\n          </p>\n          <p className=\" text-[12px] font-[400] text-white/60 py-[10px] pr-[20px]\">\n            After successful registration, the quick login will be automatically\n            bound.\n          </p>\n        </div>\n        <div className=\"pt-[0px]\">\n          <form onSubmit={handleSubmit}>\n            {/* Name Input */}\n            <div className=\"relative py-[20px]\">\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                onFocus={() => setIsFocusedName(true)}\n                onBlur={() => setIsFocusedName(name !== \"\")}\n                className=\"w-full px-4 py-2 bg-[#161619] input_border focus:outline-none text-white placeholder-transparent\"\n                required\n                placeholder=\"\"\n              />\n              <label\n                htmlFor=\"name\"\n                className={`absolute text-[14px] left-4 text-gray-500 transition-all duration-300 pointer-events-none ${\n                  isFocusedName || name\n                    ? \"top-[-8px] text-[12px] text-blue-500\"\n                    : \"top-1/2 transform -translate-y-1/2\"\n                }`}\n              >\n                Please Enter Username\n              </label>\n            </div>\n\n            {/* Password Input with validation */}\n            <div className=\"relative py-[20px]\">\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                onFocus={() => setIsFocusedPassword(true)}\n                onBlur={() => setIsFocusedPassword(password !== \"\")}\n                className=\"w-full px-4 py-2 bg-[#161619] input_border focus:outline-none text-white placeholder-transparent\"\n                required\n                placeholder=\"\"\n              />\n              <label\n                htmlFor=\"password\"\n                className={`absolute text-[14px] left-4 text-gray-500 transition-all duration-300 pointer-events-none ${\n                  isFocusedPassword || password\n                    ? \"top-[-8px] text-[12px] text-blue-500\"\n                    : \"top-1/2 transform -translate-y-1/2\"\n                }`}\n              >\n                Please Set a Password\n              </label>\n            </div>\n\n            {/* Confirm Password Input */}\n            <div className=\"relative py-[20px]\">\n              <input\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                onFocus={() => setIsFocusedConfirmPassword(true)}\n                onBlur={() =>\n                  setIsFocusedConfirmPassword(confirmPassword !== \"\")\n                }\n                className=\"w-full px-4 py-2 bg-[#161619] input_border focus:outline-none text-white placeholder-transparent\"\n                required\n                placeholder=\"\"\n              />\n              <label\n                htmlFor=\"confirmPassword\"\n                className={`absolute text-[14px] left-4 text-gray-500 transition-all duration-300 pointer-events-none ${\n                  isFocusedConfirmPassword || confirmPassword\n                    ? \"top-[-8px] text-[12px] text-blue-500\"\n                    : \"top-1/2 transform -translate-y-1/2\"\n                }`}\n              >\n                Please Confirm Your Password\n              </label>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              disabled={!validatePassword(password) || !passwordsMatch}\n              type=\"submit\"\n              className={`w-full mt-[20px] py-2 px-4 rounded-lg ${\n                validatePassword(password) && passwordsMatch\n                  ? \"login_button\"\n                  : \"next_button\"\n              } transition duration-300 ease-in-out`}\n            >\n              Next\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { useState, useEffect } from \"react\";\nimport capClose from \"../../../assets/login/capClose.svg\";\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  setCapCode,\n  setCaptchaOpen,\n  setOCapKey,\n} from \"../../../features/login/ModelSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getCaptcha } from \"../../../services/userService\";\n\nconst Captch: React.FC<{}> = () => {\n  const dispatch = useDispatch();\n  const [captchaCode, setCaptchaCode] = useState(\"\");\n  const [captchaImage, setCaptchaImage] = useState<string | null>(null);\n  const [keyStatus, setKeyStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const navigate = useNavigate();\n\n  // Fetch captcha when the component loads\n  useEffect(() => {\n    fetchCaptcha();\n  }, []);\n\n  // Update button state based on captcha input\n  useEffect(() => {\n    setIsButtonDisabled(captchaCode.length !== 4);\n  }, [captchaCode]);\n\n  // Function to fetch captcha using userService\n  const fetchCaptcha = async () => {\n    try {\n      const { captchaImage, keyStatus } = await getCaptcha();\n\n      setCaptchaImage(captchaImage);\n      setKeyStatus(keyStatus);\n    } catch (err) {\n      setError(\"Failed to load captcha\");\n      console.error(\"Captcha error:\", err);\n    }\n  };\n\n  const handleSubmit = () => {\n    dispatch(setCapCode(captchaCode));\n    dispatch(setOCapKey(keyStatus));\n    dispatch(setCaptchaOpen(false));\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-[99999] bg-black/50 backdrop-blur-[12px] w-screen h-screen flex justify-center items-center\">\n      {captchaImage && (\n        <div className=\"bg-[#1C1B20] w-[310px] h-[170px] p-[20px]\">\n          <div className=\"flex justify-between items-center pb-[16px]\">\n            <h1 className=\"text-white text-[16px] font-[400] text-center\">\n              Verify\n            </h1>\n            <img\n              onClick={() => dispatch(setCaptchaOpen(false))}\n              className=\"p-1 bg-white\"\n              src={capClose}\n              alt=\"Close\"\n            />\n          </div>\n          <div className=\"flex justify-center items-center gap-[4px]\">\n            <input\n              type=\"number\"\n              placeholder=\"Enter Code\"\n              className=\"bg-[#333237] rounded-[4px] text-white p-[10px] focus:outline-none h-[40px]\"\n              value={captchaCode}\n              onChange={(e) => setCaptchaCode(e.target.value)}\n            />\n            <img\n              className=\"w-[87px] h-[40px]\"\n              src={captchaImage}\n              alt=\"Captcha\"\n            />\n          </div>\n          <button\n            onClick={handleSubmit}\n            className={`mt-[16px] w-full rounded-[4px] p-[10px] text-[14px] font-[400] ${\n              isButtonDisabled\n                ? \"bg-[#333237] text-[#777]\"\n                : \"bg-white text-black\"\n            }`}\n            disabled={isButtonDisabled}\n            // onClick={handleFunction}\n          >\n            Sure\n          </button>\n          {/* {error && (\n            <div className=\"text-red-500 mt-2 text-center\">{error}</div>\n          )} */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Captch;\n","import React, { useState } from \"react\";\nimport Login from \"./Login\";\nimport './Bound.css'\nimport Register from \"./Register\";\nimport { useSelector } from \"react-redux\";\nimport Captch from \"./Captch\";\n\ninterface BoundProps {}\n\nconst Bound: React.FC<BoundProps> = ({}) => {\n  const { openCaptcha } = useSelector((state: any) => state.model);\n \n  const [show,setShow] = useState(true)\n  return (\n    <div>\n      {openCaptcha && <Captch /> }\n     {show ? <Login show ={show} setShow={setShow} /> : <Register />}\n    </div>\n  );\n};\n\nexport default Bound;\n","import { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { handleSocialLoginCallback } from \"../../services/userService\";\nimport Bound from \"../../components/login/Social/Bound\";\nimport { useDispatch } from \"react-redux\";\nimport { setSocial_id } from \"../../features/login/ModelSlice\";\n\nexport const SocialLoginCallbackPage = () => {\n  const [searchParams] = useSearchParams();\n  const [bound, setBound] = useState<boolean>(false);\n  const [show, setShow] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setShow(false);\n    const code = searchParams.get(\"code\");\n    const type = searchParams.get(\"type\");\n\n    const handleCallback = async () => {\n      if (code && type) {\n        try {\n          const data = await handleSocialLoginCallback(type, \"login\", code); // Await the async call\n\n          if (data) {\n            dispatch(setSocial_id(data.social_id));\n          }\n          if (data?.token) {\n            localStorage.setItem(\"authToken\", JSON.stringify(data.token));\n            navigate(\"/profile\");\n          } else {\n            setShow(false);\n          }\n        } catch (error) {\n          console.error(\"Error handling social login callback:\", error);\n        }\n      }\n    };\n\n    handleCallback(); // Call the async function\n  }, [searchParams]);\n\n  return (\n    <div className=\"h-screen w-screen p-[20px] bg-[#161619]\">\n      {show ? \"loading..\" : <Bound />}\n    </div>\n  );\n};\n\nexport default SocialLoginCallbackPage;\n"],"names":["_ref","setShow","captchaCode","captchaKey","social_id","useSelector","state","model","searchParams","useSearchParams","dispatch","useDispatch","name","setName","useState","navigate","useNavigate","email","setEmail","password","setPassword","isFocusedName","setIsFocusedName","isFocusedEmail","setIsFocusedEmail","isFocusedPassword","setIsFocusedPassword","validatePassword","lengthValid","length","containsLetters","test","containsNumbers","_jsxs","className","children","_jsx","onClick","src","close","alt","onSubmit","async","_searchParams$get","e","preventDefault","type","get","handleSocialLoginCredentials","setCaptchaOpen","value","onChange","target","onFocus","onBlur","required","placeholder","htmlFor","disabled","confirmPassword","setConfirmPassword","isFocusedConfirmPassword","setIsFocusedConfirmPassword","passwordsMatch","handleSocialSignUpCredentials","Captch","setCaptchaCode","captchaImage","setCaptchaImage","keyStatus","setKeyStatus","error","setError","isButtonDisabled","setIsButtonDisabled","useEffect","fetchCaptcha","getCaptcha","err","capClose","handleSubmit","setCapCode","setOCapKey","openCaptcha","show","Login","Register","SocialLoginCallbackPage","bound","setBound","code","data","handleSocialLoginCallback","setSocial_id","token","localStorage","setItem","JSON","stringify","handleCallback","Bound"],"sourceRoot":""}