{"version":3,"file":"static/js/593.aef7603b.chunk.js","mappings":"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","sources":["pages/profile/Email.tsx","pages/profile/components/email/Captcha.tsx","pages/profile/components/email/Otp.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { setCaptchaOpen } from \"../../features/login/ModelSlice\";\nimport Captcha from \"./components/email/Captcha\";\nimport Otp from \"./components/email/Otp\";\nimport { showToast } from \"./error/ErrorSlice\";\nimport { useGetUserQuery } from \"./services/profileApi\";\n\nconst Email: React.FC = () => {\n  const dispatch = useDispatch();\n  const { openCaptcha, openOtp } = useSelector((state: any) => state.model); // OpenCaptcha and OpenOtp states\n  const { data: userData } = useGetUserQuery(undefined);\n  const user = userData?.data;\n  const [active, setActive] = useState(false);\n  const [text, setText] = useState(user?.email); // Email value\n\n  // Email validation function\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateEmail(text)) {\n      dispatch(\n        showToast({\n          message: \"请输入有效的电子邮件地址\",\n          type: \"error\",\n        })\n      );\n      return;\n    }\n\n    dispatch(setCaptchaOpen(true));\n  };\n\n  useEffect(() => {\n    if (text) {\n      setActive(true);\n    } else {\n      setActive(false);\n    }\n  }, [text]);\n\n  const handleRemove = () => {\n    setText(\"\");\n  };\n\n  return (\n    <div>\n      <div className=\"fixed-bg\"></div>\n\n      {/* Show email form only if Captcha and OTP components are not open */}\n      {!openOtp && (\n        <div>\n          <div className=\"flex fixed top-0 w-full z-10 bg-[#161619] justify-between items-center p-2\">\n            <Link to=\"/info\" className=\"back-button\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n              >\n                <path\n                  d=\"M7.828 11H20V13H7.828L13.192 18.364L11.778 19.778L4 12L11.778 4.22198L13.192 5.63598L7.828 11Z\"\n                  fill=\"white\"\n                />\n              </svg>\n            </Link>\n            <div className=\"history-title pr-10\">设置新邮箱</div>\n            <div className=\"edit-title cursor-pointer\"></div>\n          </div>\n          {/* <div className=\"mt-[60px] p-4\">\n            <form onSubmit={handleSubmit} className=\"w-full\">\n              <input\n                type=\"email\"\n                className=\"nickname-input\"\n                placeholder=\"输入您的电子邮件\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n              />\n            </form>\n          </div> */}\n          <div className=\"mt-[80px] p-4 relative\">\n            <form onSubmit={handleSubmit} className=\"w-full\">\n              <input\n                type=\"text\"\n                className=\"new-input\"\n                placeholder=\"输入您的电子邮件\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n              />\n              <button\n                className={`submit_btn`}\n                style={{\n                  background: active ? \"#F54100\" : \"rgba(255, 255, 255, 0.04)\",\n                  color: active ? \"white\" : \"rgba(255, 255, 255, 0.20)\",\n                }}\n              >\n                保存\n              </button>\n            </form>\n            <button className=\"close-btn-input\" onClick={handleRemove}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"10\"\n                height=\"10\"\n                viewBox=\"0 0 10 10\"\n                fill=\"none\"\n              >\n                <path\n                  d=\"M5 3.88906L8.88906 0L10 1.11094L6.11094 5L10 8.88906L8.88906 10L5 6.11094L1.11094 10L0 8.88906L3.88906 5L0 1.11094L1.11094 0L5 3.88906Z\"\n                  fill=\"white\"\n                  fill-opacity=\"0.8\"\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Show Captcha if Captcha is open */}\n      {openCaptcha && <Captcha data={text} type=\"email\" />}\n\n      {/* Show Otp if Otp component is open */}\n      {openOtp && <Otp data={text} type=\"email\" />}\n    </div>\n  );\n};\n\nexport default Email;\n","import React, { useState, useEffect } from \"react\";\nimport capClose from \"../../../../assets/login/capClose.svg\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setCaptchaOpen,\n  setOtpOpen,\n} from \"../../../../features/login/ModelSlice\";\nimport { getCaptcha } from \"../../../../services/userService\"; // Importing service methods\nimport {\n  useCheckCaptchaMutation,\n  useLazySendCodeQuery,\n} from \"../../services/profileApi\";\nimport { showToast } from \"../../error/ErrorSlice\";\n\nconst Captcha: React.FC<{ data: string; type: string }> = ({ data, type }) => {\n  const dispatch = useDispatch();\n  const [captchaCode, setCaptchaCode] = useState(\"\");\n  const [captchaImage, setCaptchaImage] = useState<string | null>(null);\n  const [keyStatus, setKeyStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [checkCaptcha, { isLoading, isError }] = useCheckCaptchaMutation(); // RTK mutation hook for captcha verification\n  const [triggerSendCode, { isLoading: isSendCodeLoading }] =\n    useLazySendCodeQuery(); // RTK lazy query for sending code\n\n  // Fetch captcha when the component loads\n  useEffect(() => {\n    fetchCaptcha();\n  }, []);\n\n  // Update button state based on captcha input\n  useEffect(() => {\n    setIsButtonDisabled(captchaCode.length !== 4);\n  }, [captchaCode]);\n\n  // Function to fetch captcha using userService\n  const fetchCaptcha = async () => {\n    try {\n      const { captchaImage, keyStatus } = await getCaptcha();\n      setCaptchaImage(captchaImage);\n      setKeyStatus(keyStatus);\n    } catch (err) {\n      dispatch(\n        showToast({\n          message: \"无法加载验证码\",\n          type: \"error\",\n        })\n      );\n      setError(\"\");\n    }\n  };\n\n  // Function to handle captcha verification\n  const handleVerifyCaptcha = async () => {\n    try {\n      const captchaResponse = await checkCaptcha({\n        code: captchaCode,\n        key: keyStatus,\n      }).unwrap();\n\n      // Call sendCode after captcha verification\n      const sendCodeResponse = await triggerSendCode({\n        send_type: type, // Assuming you are sending this for email verification\n        to: data, // Email from the parent component\n        captcha: captchaResponse?.data?.key, // Captcha key from response\n      }).unwrap();\n\n      dispatch(setCaptchaOpen(false));\n      // Dispatch action to open OTP component\n      dispatch(setOtpOpen(true)); // Assuming you want to show the OTP form now\n    } catch (error) {\n      dispatch(\n        showToast({\n          message:\n            (error as any)?.data?.msg || \"验证码无效或无法发送 OTP。请重试。\",\n          type: \"error\",\n        })\n      );\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-[99999] bg-black/50 backdrop-blur-[12px] w-screen h-screen flex justify-center items-center\">\n      {captchaImage && (\n        <div className=\"bg-[#1C1B20] w-[310px] h-[170px] p-[20px]\">\n          <div className=\"flex justify-between items-center pb-[16px]\">\n            <h1 className=\"text-white text-[16px] font-[400] text-center\">\n              核实\n            </h1>\n            <img\n              onClick={() => dispatch(setCaptchaOpen(false))}\n              className=\"p-1 bg-white\"\n              src={capClose}\n              alt=\"Close\"\n            />\n          </div>\n          <div className=\"flex justify-center items-center gap-[4px]\">\n            <input\n              type=\"text\"\n              placeholder=\"输入代码\"\n              className=\"bg-[#333237] rounded-[4px] text-white p-[10px] focus:outline-none h-[40px]\"\n              value={captchaCode}\n              onChange={(e) => setCaptchaCode(e.target.value)}\n            />\n            <img\n              className=\"w-[87px] h-[40px]\"\n              src={captchaImage}\n              alt=\"Captcha\"\n            />\n          </div>\n          <button\n            className={`mt-[16px] w-full rounded-[4px] p-[10px] text-[14px] font-[400] ${\n              isButtonDisabled || isLoading || isSendCodeLoading\n                ? \"bg-[#333237] text-[#777]\"\n                : \"bg-[#f54100] text-white\"\n            }`}\n            disabled={isButtonDisabled || isLoading || isSendCodeLoading}\n            onClick={handleVerifyCaptcha}\n          >\n            {isLoading || isSendCodeLoading ? \"正在验证…\" : \"当然\"}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Captcha;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport {\n  useChangeEmailMutation,\n  useChangePhnumberMutation,\n  useGetUserQuery,\n  useLazySendCodeQuery, // Add the sendCode mutation\n} from \"../../services/profileApi\"; // Import your mutation\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setOtpOpen,\n  setCaptchaOpen,\n} from \"../../../../features/login/ModelSlice\";\nimport { setUser } from \"../slice/UserSlice\";\nimport { showToast } from \"../../error/ErrorSlice\";\n\nconst Otp: React.FC<{ data: string; type: string }> = ({ data, type }) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [otp, setOtp] = useState<string[]>([\"\", \"\", \"\", \"\", \"\", \"\"]); // For 6 OTP digits\n  const [timer, setTimer] = useState(60); // Set timer to 60 seconds\n\n  const [changeEmail] = useChangeEmailMutation(); // RTK Mutation for email change\n  const [changePhumber] = useChangePhnumberMutation(); // RTK Mutation for phone number change\n  const [triggerSendCode, { isLoading: isResending }] = useLazySendCodeQuery(); // Add sendCode mutation for resending OTP\n  // const user = useSelector((state: any) => state.user.user);\n  const { data: userData, refetch } = useGetUserQuery(undefined);\n\n  // Countdown for resending OTP\n  useEffect(() => {\n    if (timer > 0) {\n      const countdown = setInterval(() => setTimer(timer - 1), 1000);\n      return () => clearInterval(countdown);\n    }\n  }, [timer]);\n\n  const handleChange = (\n    value: string,\n    index: number,\n    event: React.KeyboardEvent\n  ) => {\n    const newOtp = [...otp];\n\n    if (event.key === \"Backspace\") {\n      if (!newOtp[index] && index > 0) {\n        const prevInput = document.getElementById(`otp-input-${index - 1}`);\n        newOtp[index - 1] = \"\";\n        if (prevInput) {\n          (prevInput as HTMLInputElement).focus();\n        }\n      } else {\n        newOtp[index] = \"\";\n      }\n    } else if (value.length <= 1) {\n      newOtp[index] = value;\n      setOtp(newOtp);\n\n      // Automatically move to the next input if the current one is filled\n      const nextInput = document.getElementById(`otp-input-${index + 1}`);\n      if (nextInput && value) {\n        (nextInput as HTMLInputElement).focus();\n      }\n\n      // If the OTP is fully filled, automatically call the API\n      if (newOtp.every((digit) => digit.length === 1)) {\n        handleSubmit(newOtp.join(\"\"));\n      }\n    }\n  };\n\n  // Function to handle OTP submission automatically when fully filled\n  const handleSubmit = async (otpString: string) => {\n    try {\n      if (otpString.length === 6) {\n        if (type === \"email\") {\n          await changeEmail({\n            new_email: data, // The email passed from the parent component\n            email_code: otpString, // The 6-digit OTP\n          }).unwrap();\n          refetch();\n        } else {\n          await changePhumber({\n            new_phone: data, // The phone number passed from the parent component\n            sms_code: otpString, // The 6-digit OTP\n          }).unwrap();\n          refetch();\n        }\n\n        dispatch(setOtpOpen(false));\n        dispatch(setCaptchaOpen(false));\n        navigate(\"/info\");\n\n        dispatch(\n          showToast({\n            message: `${type} 修改成功`,\n            type: \"success\",\n          })\n        );\n      }\n    } catch (error) {\n      dispatch(\n        showToast({\n          message: (error as any)?.data?.msg || \"发生错误\",\n          type: \"error\",\n        })\n      );\n    }\n  };\n\n  // Function to handle OTP resend\n  const handleResend = () => {\n    dispatch(setOtpOpen(false));\n    dispatch(setCaptchaOpen(true));\n  };\n\n  return (\n    <div className=\"text-white\">\n      <div className=\"flex items-center justify-between w-full mt-5 px-4\">\n        <button\n          onClick={() => {\n            dispatch(setOtpOpen(false));\n            dispatch(setCaptchaOpen(false));\n          }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n          >\n            <path\n              d=\"M7.828 11H20V13H7.828L13.192 18.364L11.778 19.778L4 12L11.778 4.22198L13.192 5.63598L7.828 11Z\"\n              fill=\"white\"\n            />\n          </svg>\n        </button>\n        <div className=\"text-lg font-semibold\">验证码</div>\n        <div />\n      </div>\n      <div className=\"flex flex-col justify-center items-center mt-10 p-3\">\n        {/* OTP Input Boxes */}\n        <div className=\"flex mt-8 space-x-2\">\n          {otp.map((digit, index) => (\n            <input\n              key={index}\n              id={`otp-input-${index}`}\n              type=\"text\"\n              maxLength={1}\n              className=\"w-10 h-10 otp-input text-center text-white border-b-2 focus:outline-none\"\n              value={digit}\n              onChange={(e) =>\n                handleChange(\n                  e.target.value,\n                  index,\n                  e as unknown as React.KeyboardEvent\n                )\n              }\n              onKeyDown={(e) => handleChange(\"\", index, e)}\n            />\n          ))}\n        </div>\n\n        {/* OTP Verification Message */}\n        <p className=\"mt-4 text-center text-sm text-gray-400\">\n          验证码已发送至 <span className=\"text-white\">{data}</span>.\n          请检查您的邮件，如果没有收到，请务必再次检查您的垃圾邮件\n        </p>\n\n        {/* Resend OTP Timer */}\n        <div className=\"mt-6 otp_btn\">\n          {timer > 0 ? (\n            <p className=\"text-gray-400\">{timer} s</p>\n          ) : (\n            <button\n              className=\"text-white\"\n              onClick={handleResend}\n              disabled={isResending}\n            >\n              {isResending ? \"重新发送...\" : \"重新发送代码\"}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Otp;\n"],"names":["Email","dispatch","useDispatch","openCaptcha","openOtp","useSelector","state","model","data","userData","useGetUserQuery","undefined","user","active","setActive","useState","text","setText","email","useEffect","_jsxs","children","_jsx","className","Link","to","xmlns","width","height","viewBox","fill","d","onSubmit","e","preventDefault","test","setCaptchaOpen","showToast","message","type","placeholder","value","onChange","target","style","background","color","onClick","handleRemove","Captcha","Otp","_ref","captchaCode","setCaptchaCode","captchaImage","setCaptchaImage","keyStatus","setKeyStatus","error","setError","isButtonDisabled","setIsButtonDisabled","checkCaptcha","isLoading","isError","useCheckCaptchaMutation","triggerSendCode","isSendCodeLoading","useLazySendCodeQuery","fetchCaptcha","length","async","getCaptcha","err","src","capClose","alt","disabled","_captchaResponse$data","captchaResponse","code","key","unwrap","send_type","captcha","setOtpOpen","_data","msg","navigate","useNavigate","otp","setOtp","timer","setTimer","changeEmail","useChangeEmailMutation","changePhumber","useChangePhnumberMutation","isResending","refetch","countdown","setInterval","clearInterval","handleChange","index","event","newOtp","prevInput","document","getElementById","focus","nextInput","every","digit","handleSubmit","join","otpString","new_email","email_code","new_phone","sms_code","map","id","maxLength","onKeyDown","handleResend"],"sourceRoot":""}